diff --git a/node_modules/@hydrofoil/labyrinth/lib/query/dynamicCollection.js b/node_modules/@hydrofoil/labyrinth/lib/query/dynamicCollection.js
index ffcb043..10e5c81 100644
--- a/node_modules/@hydrofoil/labyrinth/lib/query/dynamicCollection.js
+++ b/node_modules/@hydrofoil/labyrinth/lib/query/dynamicCollection.js
@@ -1,6 +1,6 @@
 "use strict";
 var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
+  return (mod && mod.__esModule) ? mod : { "default": mod };
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.createFilters = void 0;
@@ -14,181 +14,193 @@ const stream_to_array_1 = __importDefault(require("stream-to-array"));
 const clownface_shacl_path_1 = require("clownface-shacl-path");
 const rdf_literal_1 = require("rdf-literal");
 const term_set_1 = __importDefault(require("@rdfjs/term-set"));
+const is_graph_pointer_1 = require("is-graph-pointer");
 const code_1 = require("../code");
 const filters_1 = require("../query/filters");
 const logger_1 = require("../logger");
 const eagerLinks_1 = require("../query/eagerLinks");
 function createTemplateVariablePatterns(subject, queryPointer, api) {
-    return async (mapping, index) => {
-        const property = mapping.property;
-        if (!property) {
-            (0, logger_1.log)('Skipping mapping without property');
-            return '';
-        }
-        if (rdf_ns_builders_1.hydra.pageIndex.equals(property.id)) {
-            (0, logger_1.log)('Skipping hydra:pageIndex property from query filters');
-            return '';
-        }
-        const value = queryPointer.out(property.id);
-        if (value.values.length === 0) {
-            (0, logger_1.log)('Value not found for %s', property.id.value);
-            return '';
-        }
-        let createPattern;
-        let args = [];
-        const queryFilters = mapping.pointer.out(builders_1.hyper_query.filter);
-        if (!queryFilters.value) {
-            (0, logger_1.log)('Applying implicit exact match filter for %s', property.id.value);
-            createPattern = filters_1.exactMatch;
-        }
-        else {
-            const [loaded] = await (0, code_1.loadImplementations)(queryFilters, { api, log: logger_1.log }, { single: true });
-            if (!loaded) {
-                (0, logger_1.warn)('Failed to load pattern function');
-                return '';
-            }
-            ([createPattern, args] = loaded);
-        }
-        return createPattern({
-            subject,
-            predicate: property.id,
-            object: value,
-            variable(name) {
-                return rdf_ext_1.default.variable(`filter${index + 1}_${name}`);
-            },
-        }, ...args);
-    };
+  return async (mapping, index) => {
+    const property = mapping.property;
+    if (!property) {
+      (0, logger_1.log)('Skipping mapping without property');
+      return '';
+    }
+    if (rdf_ns_builders_1.hydra.pageIndex.equals(property.id)) {
+      (0, logger_1.log)('Skipping hydra:pageIndex property from query filters');
+      return '';
+    }
+    const value = queryPointer.out(property.id);
+    if (value.values.length === 0) {
+      (0, logger_1.log)('Value not found for %s', property.id.value);
+      return '';
+    }
+    let createPattern;
+    let args = [];
+    const queryFilters = mapping.pointer.out(builders_1.hyper_query.filter);
+    if (!queryFilters.value) {
+      (0, logger_1.log)('Applying implicit exact match filter for %s', property.id.value);
+      createPattern = filters_1.exactMatch;
+    }
+    else {
+      const [loaded] = await (0, code_1.loadImplementations)(queryFilters, { api, log: logger_1.log }, { single: true });
+      if (!loaded) {
+        (0, logger_1.warn)('Failed to load pattern function');
+        return '';
+      }
+      ([createPattern, args] = loaded);
+    }
+    return createPattern({
+      subject,
+      predicate: property.id,
+      object: value,
+      variable(name) {
+        return rdf_ext_1.default.variable(`filter${index + 1}_${name}`);
+      },
+    }, ...args);
+  };
 }
 function* createPatterns(subs, preds, objs, { graph }) {
-    for (const subject of subs) {
-        for (const predicate of preds) {
-            for (const object of objs) {
-                const pattern = (0, rdf_string_1.sparql) `${subject} ${predicate} ${object} .`;
-                yield graph ? (0, rdf_string_1.sparql) `GRAPH ${graph} { ${pattern} }` : pattern;
-            }
-        }
+  for (const subject of subs) {
+    for (const predicate of preds) {
+      for (const object of objs) {
+        const pattern = (0, rdf_string_1.sparql) `${subject} ${predicate} ${object} .`;
+        yield graph ? (0, rdf_string_1.sparql) `GRAPH ${graph} { ${pattern} }` : pattern;
+      }
     }
+  }
 }
 function toSparqlPattern(member) {
-    const seen = new term_set_1.default();
-    return function (previous, memberAssertion) {
-        var _a;
-        if (seen.has(memberAssertion.term)) {
-            return previous;
-        }
-        seen.add(memberAssertion.term);
-        const subject = memberAssertion.out(rdf_ns_builders_1.hydra.subject).terms;
-        const predicate = memberAssertion.out(rdf_ns_builders_1.hydra.property).terms;
-        const object = memberAssertion.out(rdf_ns_builders_1.hydra.object).terms;
-        const graph = ((_a = memberAssertion.out(builders_1.knossos.ownGraphOnly).term) === null || _a === void 0 ? void 0 : _a.equals((0, rdf_literal_1.toRdf)(true))) ? member : undefined;
-        if (subject.length && predicate.length && !object.length) {
-            return [...previous, ...createPatterns(subject, predicate, [member], { graph })];
-        }
-        if (subject.length && object.length && !predicate.length) {
-            return [...previous, ...createPatterns(subject, [member], object, { graph })];
-        }
-        if (predicate.length && object.length && !subject.length) {
-            return [...previous, ...createPatterns([member], predicate, object, { graph })];
-        }
-        (0, logger_1.log)('Skipping invalid member assertion');
-        return previous;
-    };
-}
-function createOrdering(collectionTypes, collection, subject) {
-    const [instanceOrders] = collection.out(builders_1.hyper_query.order).toArray();
-    const [typeOrders] = collectionTypes.out(builders_1.hyper_query.order).toArray();
-    const orders = (instanceOrders === null || instanceOrders === void 0 ? void 0 : instanceOrders.list()) || (typeOrders === null || typeOrders === void 0 ? void 0 : typeOrders.list());
-    if (!orders) {
-        return {
-            patterns: (0, rdf_string_1.sparql) ``,
-            addClauses: q => q,
-        };
+  const seen = new term_set_1.default();
+  return function (previous, memberAssertion) {
+    var _a;
+    if (seen.has(memberAssertion.term)) {
+      return previous;
+    }
+    seen.add(memberAssertion.term);
+    const subject = memberAssertion.out(rdf_ns_builders_1.hydra.subject).terms;
+    const predicate = memberAssertion.out(rdf_ns_builders_1.hydra.property).terms;
+    const object = memberAssertion.out(rdf_ns_builders_1.hydra.object).terms;
+    const graph = ((_a = memberAssertion.out(builders_1.knossos.ownGraphOnly).term) === null || _a === void 0 ? void 0 : _a.equals((0, rdf_literal_1.toRdf)(true))) ? member : undefined;
+    if (subject.length && predicate.length && !object.length) {
+      return [...previous, ...createPatterns(subject, predicate, [member], { graph })];
     }
-    let orderIndex = 0;
-    let patterns = (0, rdf_string_1.sparql) ``;
-    const clauses = [];
-    for (const order of orders) {
-        const path = (0, clownface_shacl_path_1.toSparql)(order.out(builders_1.hyper_query.path));
-        const variable = rdf_ext_1.default.variable(`order${++orderIndex}`);
-        const pattern = (0, rdf_string_1.sparql) `OPTIONAL { ${subject} ${path} ${variable} } .`;
-        patterns = (0, rdf_string_1.sparql) `${patterns}\n${pattern}`;
-        clauses.push({
-            variable,
-            descending: rdf_ns_builders_1.ldp.Descending.equals(order.out(builders_1.hyper_query.direction).term),
-        });
+    if (subject.length && object.length && !predicate.length) {
+      return [...previous, ...createPatterns(subject, [member], object, { graph })];
     }
+    if (predicate.length && object.length && !subject.length) {
+      return [...previous, ...createPatterns([member], predicate, object, { graph })];
+    }
+    (0, logger_1.log)('Skipping invalid member assertion');
+    return previous;
+  };
+}
+function createOrdering(collectionTypes, collection, subject) {
+  const [instanceOrders] = collection.out(builders_1.hyper_query.order).toArray();
+  const [typeOrders] = collectionTypes.out(builders_1.hyper_query.order).toArray();
+  const orders = (instanceOrders === null || instanceOrders === void 0 ? void 0 : instanceOrders.list()) || (typeOrders === null || typeOrders === void 0 ? void 0 : typeOrders.list());
+  if (!orders) {
     return {
-        patterns,
-        addClauses(query) {
-            return clauses.reduce((orderedQuery, { variable, descending }) => {
-                return orderedQuery.ORDER().BY(variable, descending);
-            }, query);
-        },
+      patterns: (0, rdf_string_1.sparql) ``,
+      addClauses: q => q,
     };
-}
-function resourceIncludePaths(api, collection) {
-    const classIncludes = api.node(collection.out(rdf_ns_builders_1.rdf.type)).out(builders_1.hyper_query.memberInclude).toArray();
-    const instanceIncludes = collection.out(builders_1.hyper_query.memberInclude).toArray();
-    return [...classIncludes, ...instanceIncludes];
+  }
+  let orderIndex = 0;
+  let patterns = (0, rdf_string_1.sparql) ``;
+  const clauses = [];
+  for (const order of orders) {
+    const path = (0, clownface_shacl_path_1.toSparql)(order.out(builders_1.hyper_query.path));
+    const variable = rdf_ext_1.default.variable(`order${++orderIndex}`);
+    const pattern = (0, rdf_string_1.sparql) `OPTIONAL { ${subject} ${path} ${variable} } .`;
+    patterns = (0, rdf_string_1.sparql) `${patterns}\n${pattern}`;
+    clauses.push({
+      variable,
+      descending: rdf_ns_builders_1.ldp.Descending.equals(order.out(builders_1.hyper_query.direction).term),
+    });
+  }
+  return {
+    patterns,
+    addClauses(query) {
+      return clauses.reduce((orderedQuery, { variable, descending }) => {
+        return orderedQuery.ORDER().BY(variable, descending);
+      }, query);
+    },
+  };
 }
 const memberAssertionPredicates = [rdf_ns_builders_1.hydra.manages, rdf_ns_builders_1.hydra.memberAssertion];
 async function default_1({ api, collection, client, pageSize, query, variables }) {
-    const subject = rdf_ext_1.default.variable('member');
-    const apiPointer = (0, clownface_1.default)(api);
-    const collectionTypes = apiPointer.node(collection.out(rdf_ns_builders_1.rdf.type));
-    const memberAssertions = [
-        ...collectionTypes.out(memberAssertionPredicates).toArray().reduce(toSparqlPattern(subject), []),
-        ...collection.out(memberAssertionPredicates).toArray().reduce(toSparqlPattern(subject), []),
-    ];
-    const managesBlockPatterns = memberAssertions.reduce((combined, next) => (0, rdf_string_1.sparql) `${combined}\n${next}`, (0, rdf_string_1.sparql) ``);
-    let filterPatters = [];
-    if (variables) {
-        filterPatters = await createFilters({ variables, subject, query, api });
-    }
-    const order = createOrdering(collectionTypes, collection, subject);
-    const memberPatterns = (0, rdf_string_1.sparql) `${managesBlockPatterns}\n${filterPatters}`;
-    return {
-        async members() {
-            if (!memberAssertions.length) {
-                (0, logger_1.warn)(`Collection ${collection.value} has no valid manages block and will always return empty`);
-                return [];
-            }
-            let select = sparql_builder_1.SELECT.DISTINCT `${subject}`
-                .WHERE ` 
+  const subject = rdf_ext_1.default.variable('member');
+  const apiPointer = (0, clownface_1.default)(api);
+  const collectionTypes = apiPointer.node(collection.out(rdf_ns_builders_1.rdf.type));
+  const memberAssertions = [
+    ...collectionTypes.out(memberAssertionPredicates).toArray().reduce(toSparqlPattern(subject), []),
+    ...collection.out(memberAssertionPredicates).toArray().reduce(toSparqlPattern(subject), []),
+  ];
+  const managesBlockPatterns = memberAssertions.reduce((combined, next) => (0, rdf_string_1.sparql) `${combined}\n${next}`, (0, rdf_string_1.sparql) ``);
+  let filterPatters = [];
+  if (variables) {
+    filterPatters = await createFilters({ variables, subject, query, api });
+  }
+  const order = createOrdering(collectionTypes, collection, subject);
+  const memberPatterns = (0, rdf_string_1.sparql) `${managesBlockPatterns}\n${filterPatters}`;
+  const memberData = await getMemberDataStrategy(api, collection, collectionTypes, client);
+  return {
+    async members() {
+      if (!memberAssertions.length) {
+        (0, logger_1.warn)(`Collection ${collection.value} has no valid manages block and will always return empty`);
+        return [];
+      }
+      let select = sparql_builder_1.SELECT.DISTINCT `${subject}`
+        .WHERE ` 
           ${memberPatterns}
           filter (isIRI(${subject}))
         `;
-            const isPaged = variables === null || variables === void 0 ? void 0 : variables.mapping.some(mapping => { var _a; return (_a = mapping.property) === null || _a === void 0 ? void 0 : _a.equals(rdf_ns_builders_1.hydra.pageIndex); });
-            if (isPaged) {
-                const page = Number.parseInt(query.out(rdf_ns_builders_1.hydra.pageIndex).value || '1');
-                const hydraLimit = query.out(rdf_ns_builders_1.hydra.limit).value;
-                const limit = hydraLimit ? parseInt(hydraLimit) : pageSize;
-                select = select.WHERE `${order.patterns}`.LIMIT(limit).OFFSET((page - 1) * limit);
-                select = order.addClauses(select);
-            }
-            if (order && !isPaged) {
-                (0, logger_1.warn)('Collection has order definitions but is not paged');
-            }
-            const results = await select.execute(client.query).then(stream_to_array_1.default);
-            return results.map(({ member }) => member);
-        },
-        async total() {
-            const stream = await (0, sparql_builder_1.SELECT) `(count(distinct ${subject}) as ?count)`.WHERE `${memberPatterns}`.execute(client.query);
-            const [result] = await (0, stream_to_array_1.default)(stream);
-            return Number.parseInt(result.count.value);
-        },
-        async memberData(members) {
-            if (!members.length) {
-                return rdf_ext_1.default.dataset().toStream();
-            }
-            const includePaths = resourceIncludePaths(apiPointer, collection);
-            return (0, eagerLinks_1.loadResourceWithLinks)(members, includePaths, client);
-        },
-    };
+      const isPaged = variables === null || variables === void 0 ? void 0 : variables.mapping.some(mapping => { var _a; return (_a = mapping.property) === null || _a === void 0 ? void 0 : _a.equals(rdf_ns_builders_1.hydra.pageIndex); });
+      if (isPaged) {
+        const page = Number.parseInt(query.out(rdf_ns_builders_1.hydra.pageIndex).value || '1');
+        const hydraLimit = query.out(rdf_ns_builders_1.hydra.limit).value;
+        const limit = hydraLimit ? parseInt(hydraLimit) : pageSize;
+        select = select.WHERE `${order.patterns}`.LIMIT(limit).OFFSET((page - 1) * limit);
+        select = order.addClauses(select);
+      }
+      if (order && !isPaged) {
+        (0, logger_1.warn)('Collection has order definitions but is not paged');
+      }
+      const results = await select.execute(client.query).then(stream_to_array_1.default);
+      return results.map(({ member }) => member);
+    },
+    async total() {
+      const stream = await (0, sparql_builder_1.SELECT) `(count(distinct ${subject}) as ?count)`.WHERE `${memberPatterns}`.execute(client.query);
+      const [result] = await (0, stream_to_array_1.default)(stream);
+      return Number.parseInt(result.count.value);
+    },
+    memberData,
+  };
 }
 exports.default = default_1;
+async function getMemberDataStrategy(api, collection, collectionTypes, client) {
+  let pointer = collection.out(builders_1.hyper_query.loadMemberDataStrategy);
+  if (!(0, is_graph_pointer_1.isGraphPointer)(pointer)) {
+    pointer = collectionTypes.out(builders_1.hyper_query.loadMemberDataStrategy);
+  }
+  const [strategy] = await (0, code_1.loadImplementations)(pointer, { api, log: logger_1.log }, {
+    throwWhenLoadFails: true,
+    single: true,
+  });
+  const apiPtr = (0, clownface_1.default)(api);
+  if (strategy) {
+    const [impl, args] = strategy;
+    return impl({ api: apiPtr, collection, client }, ...args);
+  }
+  return members => {
+    const classIncludes = apiPtr.node(collection.out(rdf_ns_builders_1.rdf.type)).out(builders_1.hyper_query.memberInclude).toArray();
+    const instanceIncludes = collection.out(builders_1.hyper_query.memberInclude).toArray();
+    const includePaths = [...classIncludes, ...instanceIncludes];
+    return (0, eagerLinks_1.loadResourceWithLinks)(members, includePaths, client);
+  };
+}
 async function createFilters({ subject, query, api, variables }) {
-    return Promise.all(variables.mapping.map(createTemplateVariablePatterns(subject, query, api)));
+  return Promise.all(variables.mapping.map(createTemplateVariablePatterns(subject, query, api)));
 }
 exports.createFilters = createFilters;
-//# sourceMappingURL=data:application/json;base64,
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,

diff --git a/node_modules/@hydrofoil/shaperone-hydra/lib/components/searchDecorator.js b/node_modules/@hydrofoil/shaperone-hydra/lib/components/searchDecorator.js
index bedf4c0..689e654 100644
--- a/node_modules/@hydrofoil/shaperone-hydra/lib/components/searchDecorator.js
+++ b/node_modules/@hydrofoil/shaperone-hydra/lib/components/searchDecorator.js
@@ -53,33 +53,41 @@ function getSearchUri(searchTemplate, focusNode, prop, freetextQuery) {
     return undefined;
   }
 
-  const freetextQueryVariable = searchTemplate.mapping.find(({
-    property
-  }) => property === null || property === void 0 ? void 0 : property.equals(hydra.freetextQuery));
+  const variableSource = getVariablesPointer(focusNode, searchTemplate);

-  if (freetextQueryVariable) {
-    const freetextQueryMinLength = freetextQueryVariable.pointer.out(sh.minLength).value || '1';
+  const variables = clownface({ dataset: dataset() }).blankNode();
+  for (const mapping of searchTemplate.mapping) {
+    if (mapping.property.equals(hydra.freetextQuery)) {
+      if (mapping) {
+        const freetextQueryMinLength = mapping.pointer.out(sh.minLength).value || '1';
 
-    if (parseInt(freetextQueryMinLength || '1', 10) > ((freetextQuery === null || freetextQuery === void 0 ? void 0 : freetextQuery.length) || 0)) {
-      return undefined;
+        if (parseInt(freetextQueryMinLength || '1', 10) > ((freetextQuery === null || freetextQuery === void 0 ? void 0 : freetextQuery.length) || 0)) {
+          return undefined;
+        }
+      }
+      if (freetextQuery) {
+        variables.addOut(hydra.freetextQuery, freetextQuery);
+      }
+      continue
     }
-  }
 
-  const variables = getVariablesPointer(focusNode, searchTemplate);
+    const property = mapping.property.pointer
+    let path = mapping.pointer.out(sh.path)
+    if (!path.term) {
+      path = property
+    }
 
-  if (!variables || !hasAllRequiredVariables(searchTemplate, variables)) {
-    return undefined;
+    const {terms} = findNodes(variableSource, path)
+    if (mapping.required && !terms.length) {
+      return undefined
+    }
+
+    variables.addOut(property, terms)
   }
 
-  const freetextModel = clownface({
-    dataset: dataset()
-  }).blankNode();
 
-  if (freetextQuery) {
-    freetextModel.addOut(hydra.freetextQuery, freetextQuery);
-  }
 
-  return searchTemplate.expand(variables, freetextModel);
+  return searchTemplate.expand(variables);
 }
 
 /**
